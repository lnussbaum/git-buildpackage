<chapter id="gbp.patches">
    <title>Working with patches</title>

    <para>&gbp-pq; can be used to manage patches inside
<filename>debian/patches/</filename>. The basic idea is that patches are
imported to a local <filename>patch-queue/master</filename> branch (with one
commit on the <filename>patch-queue/master</filename> branch representing
exactly one patch in <filename>debian/patches/</filename>). There, the
maintainer will work on them using usual &git; commands (rebase, commit
--amend, etc). When done, &gbp-pq; will be used to export the patches to
<filename>debian/patches/</filename>. This workflow facilitates the
cherry-picking of patches for stable releases, and the forward-porting of
patches to new upstream versions by using git rebase on the
<filename>patch-queue/master</filename> branch (patches already applied
upstream are detected automatically).  The generated patches in debian/patches/
have all the necessary information to forward them upstream given they are auto
generated via git-format-patch.</para>

<para>The main drawback of this workflow is the lack of history on the
<filename>patch-queue/master</filename> branch (but there is full history on
the <filename>master</filename> branch, of course).</para>

    <sect1 id="gbp.patches.workflow">
<title>Workflow</title>

<para>Assuming the Debian source package has its patches in
<filename>debian/patches</filename> and these are parseable by
<command>git-quiltimport(1)</command>:</para>

<para>Create patch-queue branch and import debian/patches onto it using gbp-pq:</para>

<screen>
<command>cd <replaceable>REPO</replaceable></command>
<command>gbp pq import</command>
</screen>

<para>This will switch you to the <filename>patch-queue</filename> branch
automatically. If you started from <filename>master</filename> the
<filename>patch-queue</filename> branch will be called
<filename>patch-queue/master</filename>.</para>

<para>Now you can work on the patch-queue branch (add, remove, rebase, test) to
get your patches into shape:
<itemizedlist>
<listitem><para>To add what will later become a patch in debian/patches/ simply make a
commit. The first line of the commit message will become the patch name later.
The following lines include the details of what the patch does.</para></listitem>
<listitem><para>To remove or edit commits use git rebase -i master. The git documentation
explains how to work with git-rebase.</para></listitem>
</itemizedlist></para>

<para>Regenerate the patches in <filename>debian/patches/</filename> using
&gbp-pq;. This will switch you back to master and regenerate the patches using
<command>git-format-patch(1)</command>:</para>

<screen>
  <command>gbp pq export</command>
</screen>

<para>Commit the result either by using gbp-add-patch or simply</para>
<screen>
  <command>git add debian/patches</command>
  <command>git commit</command>
</screen>

<para>Update debian/changelog (e.g. by running "git-dch -S -a")</para>
<para>Build the package</para>

<para>After importing a new upstream version you can use the following commands
to refresh debian/patches:</para>
<screen>
<command>gbp pq rebase</command>
<command>git checkout master</command>
<command>gbp pq export</command>
</screen>

<para>If a package doesn't have any patches yet, these are the steps to add
your first patch:</para>
<orderedlist>
<listitem><para>Launch an import, this will switch to the proper branch
<screen>
  <command>gbp pq import</command>
</screen>
<listitem><para>Create your first patch: edit files, test, commit your changes using <command>git commit</command></para></listitem>

<listitem><para>Back to the master branch, generate the Quilt patch set
<screen>
  <command>git checkout master</command>
  <command>gbp pq export</command>
</screen></para></listitem>

<listitem><para>Commit you first patch
<screen>
  <command>git add -a debian/patches/</command>
  <command>git commit -m 'my first patch'</command>
</screen></para></listitem>
</orderedlist>

<para>If you want to pick the changelog message from the patch see
<filename>/usr/share/doc/git-buildpackage/examples/gbp-add-patch</filename>.</para>

<para>
In order to avoid a patched (unclean) source tree after the build, you
can use &dpkg-source;'s <option>unapply-patches</option> option and
tell &git; to ignore the <filename>.pc</filename> directory.
<filename>/usr/share/doc/git-buildpackage/examples/gbp-configure-unpatched-source</filename>
sets up these two files for you.
</para>


<para>
Team maintenance
The easiest way is to not push out any patch-queue/* branches at all. They can be recreated by any team member easily by using

git branch -d patch-queue/master
gbp pq import
However you can push out patch-queue branches. Other team members must just be aware that that branches in the patch-queue/ namespace are being rebased frequently.

Working with 3.0 (quilt) packges
The 3.0 (quilt) format applies the patches in debian/patches automatically when building a source package. If you want your debian branch to contain the unpatched source there are several ways to handle this:

Using debian/source/local-options
You can use unapply-patches in debian/source/local-options to unapply the patches after the build. /usr/share/doc/git-buildpackage/examples/gbp-configure-unpatched-source will this set up for you when run from inside a git repository of a Debian package.

Using --git-export-dir
If you're using option --git-export-dir option already there's no problem since the unpatched source tree gets exported before being built (and patch by dpkg-source). Since this implies an extra copy of the whole source tree (which might be slow for big projects) and it's not really necessary when using pbuilder the next method might be more appropriate.

Working from a patch-queue branch
Instead of building from master build from patch-queue/master prepared by gbp-pq as describe above. This branch has the patches already applied as dpkg-source expects it:

gbp pq import
gbp buildpackage --git-debian-branch=patch-queue/master
Build and test...

git checkout master
gbp pq export
Cloning a repository
If you use gbp clone instead of git clone to clone a remote repository it will automatically set up the debian, upstream and pristine-tar branches for you. The manual explains the terminology.

Keeping a repository up to date
After initially cloning with gbp clone you can run gbp pull to update your debian, upstream and pristine-tar branches from the remote site. So the complete workflow for simple team maintenance looks like this:

# Initially clone the repo once
gbp clone git://git.debian.org/pkg-libvirt/gtk-vnc.git
cd gtk-vnc
Work on that clone, commit, release, push, etc. Now after a couple of days you want to make more changes but don't know if another developer worked on it. So you do:

# Update to what others might have pushed
gbp pull
This will update all necessary branches to what other developers might have pushed in the meantime. If you're also using a patch-queue as described above you can refresh that too in one step:

# Update to what others might have pushed and rebuild patch-queue
gbp pull --redo-pq
This will additionally drop your current patch-queue branch and recreate it from debian/patches.
    </para>
</chapter>
